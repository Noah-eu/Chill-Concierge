// tools/generate-places.mjs
import fs from "node:fs";
import path from "node:path";

/**
 * Použití: node tools/generate-places.mjs places.csv
 * Vstup: CSV se sloupci:
 * category,name,url,tags,address,lat,lon,minutes_walk,notes
 * Výstup: netlify/functions/data/places.js
 */

const INPUT = process.argv[2] || "places.csv";
const OUTPUT = path.resolve("netlify/functions/data/places.js");

/** ---- Robustní CSV parser (podporuje uvozovky a čárky v polích) ---- */
function parseCSV(text) {
  const lines = text.replace(/^\uFEFF/, "").split(/\r?\n/);
  if (!lines.length) return [];
  const header = splitCSVLine(lines.shift());
  const rows = [];
  for (const line of lines) {
    if (!line || /^\s*$/.test(line)) continue;
    const parts = splitCSVLine(line);
    const row = {};
    header.forEach((h, i) => (row[h.trim()] = (parts[i] ?? "").trim()));
    rows.push(row);
  }
  return rows;
}

function splitCSVLine(line) {
  const out = [];
  let cur = "";
  let inQ = false;
  for (let i = 0; i < line.length; i++) {
    const ch = line[i];
    if (ch === '"') {
      if (inQ && line[i + 1] === '"') { cur += '"'; i++; }
      else { inQ = !inQ; }
    } else if (ch === "," && !inQ) {
      out.push(cur); cur = "";
    } else {
      cur += ch;
    }
  }
  out.push(cur);
  return out;
}

/** ---- Normalizace jednoho záznamu ---- */
function normalizeRow(r) {
  const category = (r.category || r.Category || r.kategorie || "")
    .toString().trim();
  const name = (r.name || "").toString().trim();
  if (!category || !name) return null;

  const urlRaw = (r.url || "").trim();
  const url = !urlRaw
    ? ""
    : /^https?:\/\//i.test(urlRaw) ? urlRaw : `https://${urlRaw}`;

  const tags = (r.tags || "")
    .split(/[,|]/).map(s => s.trim()).filter(Boolean);

  const minutes = parseInt(r.minutes_walk, 10);
  const lat = (r.lat || "").toString().trim();
  const lon = (r.lon || "").toString().trim();

  return {
    category,                 // ← zachovat!
    name,
    url,
    tags,
    address: (r.address || "").toString().trim(),
    lat: lat || "",
    lon: lon || "",
    minutes_walk: Number.isFinite(minutes) ? minutes : null,
    notes: (r.notes || "").toString().trim()
  };
}

function ensureBuckets(map, key) {
  if (!map[key]) map[key] = [];
}
function dedupe(list) {
  const seen = new Set();
  return list.filter(p => {
    const key = p.name.toLowerCase();
    if (seen.has(key)) return false;
    seen.add(key);
    return true;
  });
}

/** ---- Načtení a zpracování ---- */
const csv = fs.readFileSync(INPUT, "utf8");
const rows = parseCSV(csv).map(normalizeRow).filter(Boolean);

const allowedCats = new Set([
  "breakfast", "cafe", "bakery", "veggie", "czech", "bar", "vietnam",
  "grocery", "pharmacy", "exchange", "atm"
]);

const PLACES = {};
for (const r of rows) {
  // přeskoč prázdné/defektní řádky
  if (!r || Object.values(r).every(v => v === undefined || String(v).trim() === "")) continue;

  const cat = r.category.toString().trim().toLowerCase();
  if (!cat) continue;
  if (!allowedCats.has(cat)) continue;

  const item = { ...r };
  delete item.category; // v uložení už kategorii nepotřebujeme

  ensureBuckets(PLACES, cat);
  PLACES[cat].push(item);
}

// seřadit podle minutes_walk (pak abecedně) a odduplikovat
for (const k of Object.keys(PLACES)) {
  PLACES[k] = dedupe(
    PLACES[k].sort((a, b) => {
      const ma = a.minutes_walk ?? 9999;
      const mb = b.minutes_walk ?? 9999;
      if (ma !== mb) return ma - mb;
      return a.name.localeCompare(b.name, "cs");
    })
  );
}

/** ---- Výstup ---- */
const banner = `/* AUTO-GENERATED by tools/generate-places.mjs — don't edit by hand */
export const PLACES = ${JSON.stringify(PLACES, null, 2)};

export function buildCuratedList(cat, opts){
  const list = (PLACES[cat] || []).slice(0, (opts?.max ?? 12));
  const labelOpen = opts?.labelOpen || "Open";
  if (!list.length) return "";
  return list.map(p =>
    \`- **\${p.name}**\${p.tags?.length ? \` — *\${p.tags.join(", ")}*\` : ""}\\n  - [\${labelOpen}](\${p.url})\`
  ).join("\\n\\n");
}
`;

fs.mkdirSync(path.dirname(OUTPUT), { recursive: true });
fs.writeFileSync(OUTPUT, banner, "utf8");
console.log(`✔ Wrote ${OUTPUT}`);
