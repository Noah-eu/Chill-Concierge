// app.jsx

import React, { useEffect, useMemo, useRef, useState } from "react";
import { marked } from "marked";
import DOMPurify from "dompurify";

/** ================== Konstanta: 3D Tour ================== */
const MATTERPORT_URL =
  "https://my.matterport.com/show/?m=PTEAUeUbMno&ss=53&sr=-1.6%2C1.05&tag=8hiaV2GWWhB&pin-pos=20.12%2C-3.85%2C8.94";

/** ================== Google palette + UI (inline CSS) ================== */
const GoogleStyle = () => (
  <style>{`
    :root{
      --blue:#4285F4; --red:#EA4335; --yellow:#FBBC05; --green:#34A853;
      --t-blue:   color-mix(in oklab, var(--blue),   white 40%);
      --t-red:    color-mix(in oklab, var(--red),    white 40%);
      --t-yellow: color-mix(in oklab, var(--yellow), white 70%);
      --t-green:  color-mix(in oklab, var(--green),  white 40%);
      --bg-1:#fffefb; --bg-2:#fbf7ef;
      --border:color-mix(in oklab, #c9b9a6, white 30%);
      --muted:#6b645c; --accent:#1f1b16;
    }

    body{
      background:
        radial-gradient(1200px 700px at 12% -6%, var(--t-yellow) 0%, transparent 50%),
        radial-gradient(1100px 650px at 100% -10%, var(--t-blue) 0%, transparent 50%),
        radial-gradient(900px 600px at 40% 120%, var(--t-green) 0%, transparent 50%),
        linear-gradient(180deg, var(--bg-1), var(--bg-2) 35%);
      background-attachment: fixed;
      margin:0;
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Inter, Arial;
      color:var(--accent);
    }

    .appHeader{
      position: sticky; top: 0; z-index: 1500;
      display: grid; grid-template-columns: 44px 1fr 44px; align-items:center;
      gap: 8px; padding: 10px 16px;
      background: linear-gradient(180deg,#ffffffcc,#fff);
      backdrop-filter: blur(6px);
      border-bottom:1px solid var(--border);
    }
    .appHeader .title{ text-align:center; font-weight:900; letter-spacing:.2px; }
    .appHeader img.logo{ height:38px; width:auto; object-fit:contain; }

    .row{display:flex;flex-direction:column;gap:12px;max-width:960px;margin:12px auto 24px;padding:0 16px}
    .scroller{
      max-height:70vh;overflow:auto;padding:8px;border-radius:14px;
      background: linear-gradient(180deg, color-mix(in oklab, var(--t-blue), white 70%) 0%, transparent 85%);
      scroll-behavior: auto;
    }

    .bubble{
      border-radius:16px;padding:12px 14px;line-height:1.35;width:fit-content;max-width:100%;white-space:pre-line;
      border:1px solid var(--border);box-shadow:0 6px 16px rgba(0,0,0,.06);background:#fff;
    }
    .me{background:linear-gradient(180deg, color-mix(in oklab, var(--t-blue), white 10%), color-mix(in oklab, var(--t-blue), white 0%));margin-left:auto;}
    .bot{background:linear-gradient(180deg, color-mix(in oklab, var(--t-yellow), white 8%), color-mix(in oklab, var(--t-yellow), white 0%));}

    .bot p{ margin:4px 0; }
    .bot ul, .bot ol{ margin:6px 0; padding-left:18px; }
    .bot li{ margin:2px 0; }
    .bot li p{ margin:0; }
    .bot li p + p{ margin-top:2px; }

    .bot img{max-width:100%;height:auto;border-radius:14px;display:block;margin:8px 0;box-shadow:0 10px 26px rgba(0,0,0,.10);border:1px solid var(--border);} 
    .bot a{display:inline-block;padding:8px 12px;border-radius:999px;border:1px solid color-mix(in oklab, var(--blue), black 15%);
      background:linear-gradient(180deg, color-mix(in oklab, var(--blue), white 8%), color-mix(in oklab, var(--blue), black 6%));
      color:#fff;text-decoration:none;font-weight:800;box-shadow:0 6px 16px rgba(66,133,244,.25);} 

    .grid{display:grid;grid-template-columns:repeat(auto-fit, minmax(160px, 1fr));gap:8px;width:100%;}
    .chipPrimary{
      --btn: var(--blue);
      padding:12px 14px;border-radius:999px;border:1px solid color-mix(in oklab, var(--btn), black 18%);
      background:linear-gradient(180deg, color-mix(in oklab, var(--btn), white 6%), color-mix(in oklab, var(--btn), black 4%));
      color:#fff;font-weight:800;letter-spacing:.15px;box-shadow:0 8px 16px color-mix(in oklab, var(--btn), transparent 80%);
      cursor:pointer;transition:.18s transform ease,.18s box-shadow ease,.18s filter ease;text-align:center;
    }
    .chipPrimary:hover{transform:translateY(-1px);box-shadow:0 12px 22px color-mix(in oklab, var(--btn), transparent 75%)}
    .chipPrimary:active{transform:translateY(0);filter:saturate(.96)}
    .chipPrimary:disabled{opacity:.6;cursor:not-allowed}

    .chip{ 
      --btn: var(--yellow);
      padding:12px 14px;border-radius:999px;border:1px solid color-mix(in oklab, var(--btn), black 18%);
      background:linear-gradient(180deg, color-mix(in oklab, var(--btn), white 38%), color-mix(in oklab, var(--btn), white 20%));
      color:#1c130f;font-weight:800;letter-spacing:.1px;box-shadow:0 4px 12px rgba(0,0,0,.05);
      cursor:pointer;text-align:center;
    }

    .backBtn{ 
      padding:10px 14px;border-radius:14px;border:1px solid var(--border);
      background:linear-gradient(180deg, #fff, color-mix(in oklab, var(--t-yellow), white 10%));
      color:var(--accent);font-weight:700;cursor:pointer;box-shadow:0 6px 12px rgba(0,0,0,.05);
    }

    .tips{color:var(--muted);font-size:13px;margin-top:4px}

    .shortcuts{ 
      border:1px solid var(--border);
      background:
        radial-gradient(800px 400px at 10% -40%, color-mix(in oklab, var(--t-yellow), white 20%) 0%, transparent 60%),
        radial-gradient(700px 380px at 100% -40%, color-mix(in oklab, var(--t-blue), white 20%) 0%, transparent 55%),
        linear-gradient(180deg, #fff, color-mix(in oklab, var(--t-yellow), white 6%));
      box-shadow:0 6px 16px rgba(0,0,0,.06);border-radius:16px;padding:12px 14px; 
      scroll-margin-top:12px;
    }
    .shortcutsHeader{display:flex;justify-content:space-between;align-items:center;gap:8px;flex-wrap:wrap;margin-bottom:8px;}

    .btnRow{display:flex;gap:8px;flex-wrap:wrap;}

    .contactBar{ 
      margin-top:4px;padding:10px 12px;border:1px dashed var(--border);border-radius:12px;
      background:linear-gradient(180deg, color-mix(in oklab, var(--t-yellow), white 10%), color-mix(in oklab, var(--t-yellow), white 2%));
      color:var(--accent);font-size:14px; 
    }

    .overlay{position:fixed;inset:0;background:rgba(0,0,0,.25);display:flex;align-items:flex-end;justify-content:center;padding:18px;z-index:2000;}
    .sheet{width:100%;max-width:700px;border-radius:18px;background:#fff;border:1px solid var(--border);box-shadow:0 18px 38px rgba(0,0,0,.20);padding:16px;}
    .sheet h4{margin:0 0 10px 0}

    .pillRow{display:flex;gap:8px;flex-wrap:wrap}
    .pill{ 
      padding:10px 14px;border-radius:999px;border:1px solid var(--border);
      background:#ffffff;color:var(--blue);
      cursor:pointer;font-weight:800;letter-spacing:.1px; 
    }
    .pill.active{ 
      border:1px solid color-mix(in oklab, var(--blue), black 18%);
      background:linear-gradient(180deg, color-mix(in oklab, var(--blue), white 6%), color-mix(in oklab, var(--blue), black 4%));
      color:#fff; 
    }

    .fabStack{ 
      position:fixed;left:50%;transform:translateX(-50%);
      bottom:18px;z-index:1100;display:flex;flex-direction:column;gap:10px; 
    }
    .fabAction{ 
      border:none;border-radius:999px;padding:12px 18px;font-weight:800;
      background:linear-gradient(180deg, color-mix(in oklab, var(--blue), white 6%), color-mix(in oklab, var(--blue), black 4%));
      color:#fff;box-shadow:0 10px 24px rgba(66,133,244,.35);cursor:pointer;min-width:220px;text-align:center; 
    }

    .fab{
      position:fixed;right:16px;bottom:90px;z-index:1000;border:none;border-radius:999px;padding:12px 14px;font-weight:800;
      box-shadow:0 10px 24px rgba(0,0,0,.25);cursor:pointer;
      color:#fff;
    }
    .fabBack{
      background:linear-gradient(180deg, color-mix(in oklab, var(--red), white 6%), color-mix(in oklab, var(--red), black 4%));
      border:1px solid color-mix(in oklab, var(--red), black 18%);
    }

    .langSingle{ display:flex; justify-content:center; margin-top:8px; }
    .langGrid2{ display:grid; grid-template-columns:repeat(2, minmax(0, 1fr)); gap:8px; margin-top:8px; }

    @media (max-width:480px){
      .row{ padding-bottom:80px; }
    }
  `}</style>
);

/** ================== i18n ================== */
const LANGS = {
  cs:"ƒåe≈°tina", en:"English", es:"Espa√±ol", de:"Deutsch", fr:"Fran√ßais",
  ru:"–†—É—Å—Å–∫–∏–π", uk:"–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", nl:"Nederlands", it:"Italiano", da:"Dansk", pl:"Polski"
};

const tr = {
  cs:{ chooseLang:"Zvolte jazyk", mainTitle:"Vyberte t√©ma", subTitle:"Podt√©ma / Subtopic", back:"‚Üê Zpƒõt",
       instructionsLabel:"üìÑ Instrukce k ubytov√°n√≠",
       catFood:"J√≠dlo a okol√≠", catTech:"Technick√© pot√≠≈æe", catOther:"Ostatn√≠", catTransport:"Doprava", catAmenities:"Vybaven√≠ hotelu",
       tourLabel:"üß≠ 3D prohl√≠dka hotelu", tourOpenMsg:"[Otev≈ô√≠t 3D prohl√≠dku]("+MATTERPORT_URL+")",
       stillAsk:"Vyberte jednu z mo≈ænost√≠ n√≠≈æe.",
       contact:"Pokud jste nena≈°li, co pot≈ôebujete, napi≈°te Davidovi (WhatsApp +420 733 439 733).",
       hide:"Skr√Ωt",
       foodDelivery:"üõµ J√≠dlo dom≈Ø", transportInfo:"üó∫Ô∏è Doprava po Praze",
       diningLabel:"üçΩÔ∏è Sn√≠danƒõ / Restaurace", bakeryLabel:"ü•ñ Pek√°rny",
       cafeBarGroupLabel:"‚òï/üç∏ Caff√® / Bar", cafeLabel:"‚òï Kav√°rny", barLabel:"üç∏ Bary",
       groceryLabel:"üõí Obchody", pharmacyLabel:"üíä L√©k√°rny",
       moneyGroupLabel:"üí± Smƒõn√°rny / ATM", exchangeLabel:"üí± Smƒõn√°rny", atmLabel:"üèß ATM",
       wifiLabel:"üì∂ Wi-Fi", powerLabel:"‚ö° Elekt≈ôina", hotWaterLabel:"üíß Tepl√° voda",
       acLabel:"‚ùÑÔ∏è Klimatizace (AC)", inductionLabel:"üç≥ Indukƒçn√≠ deska", hoodLabel:"üåÄ Digesto≈ô",
       coffeeLabel:"‚òï K√°vovar Tchibo", fireAlarmLabel:"üî• Po≈æ√°rn√≠ hl√°siƒç",
       elevatorPhoneLabel:"üõó V√Ωtah ‚Äì servis", safeLabel:"üîê Trezor",
       spareKeyLabel:"üîë N√°hradn√≠ kl√≠ƒç",
       laundryLabel:"üß∫ Pr√°delna", accessLabel:"‚ôøÔ∏è Bezbari√©rovost", smokingLabel:"üö≠ Kou≈ôen√≠",
       luggageLabel:"üéí √öschovna zavazadel", doorbellsLabel:"üîî Zvonky",
       gateLabel:"üö™ Br√°na (zevnit≈ô)", trashLabel:"üóëÔ∏è Odpadky / Popelnice",
       doctorLabel:"üë©‚Äç‚öïÔ∏è L√©ka≈ô 24/7", linenLabel:"üßª Povleƒçen√≠ / Ruƒçn√≠ky",
       pickRoom:"Zvolte ƒç√≠slo apartm√°nu", floor:"Patro", room:"Pokoj", confirm:"Zobrazit", cancel:"Zav≈ô√≠t",
       wifiStatus:"Funguje Wi-Fi?", ok:"Funguje", notOk:"Nefunguje",
       pickSsid:"Vyberte SSID", showMyWifi:"Zobrazit moje heslo",
       aRooms:"üõèÔ∏è Pokoje", aKitchen:"üç≥ Kuchy≈à", aBathroom:"üõÅ Koupelna", aService:"üß∞ Pr√°delna, √∫schovna, odpadky" },

  en:{ chooseLang:"Choose a language", mainTitle:"Pick a topic", subTitle:"Subtopic", back:"‚Üê Back",
       instructionsLabel:"üìÑ Check-in instructions",
       catFood:"Food & Nearby", catTech:"Technical issues", catOther:"Other", catTransport:"Transport", catAmenities:"Hotel amenities",
       tourLabel:"üß≠ 3D virtual tour", tourOpenMsg:"[Open the 3D tour]("+MATTERPORT_URL+")",
       stillAsk:"Pick one of the options below.",
       contact:"If you can‚Äôt find what you need, message David (WhatsApp +420 733 439 733).",
       hide:"Hide",
       foodDelivery:"üõµ Food delivery", transportInfo:"üó∫Ô∏è Getting around Prague",
       diningLabel:"üçΩÔ∏è Breakfast / Restaurants", bakeryLabel:"ü•ñ Bakeries",
       cafeBarGroupLabel:"‚òï/üç∏ Caff√® / Bar", cafeLabel:"‚òï Caf√©s", barLabel:"üç∏ Bars",
       groceryLabel:"üõí Groceries", pharmacyLabel:"üíä Pharmacies",
       moneyGroupLabel:"üí± Exchanges / ATMs", exchangeLabel:"üí± Exchanges", atmLabel:"üèß ATMs",
       wifiLabel:"üì∂ Wi-Fi", powerLabel:"‚ö° Power", hotWaterLabel:"üíß Hot water",
       acLabel:"‚ùÑÔ∏è Air conditioning (AC)", inductionLabel:"üç≥ Induction hob", hoodLabel:"üåÄ Cooker hood",
       coffeeLabel:"‚òï Tchibo coffee machine", fireAlarmLabel:"üî• Fire alarm",
       elevatorPhoneLabel:"üõó Elevator ‚Äì service", safeLabel:"üîê Safe",
       spareKeyLabel:"üîë Spare key",
       laundryLabel:"üß∫ Laundry", accessLabel:"‚ôøÔ∏è Accessibility", smokingLabel:"üö≠ Smoking",
       luggageLabel:"üéí Luggage room", doorbellsLabel:"üîî Doorbells",
       gateLabel:"üö™ Gate (inside)", trashLabel:"üóëÔ∏è Trash / bins",
       doctorLabel:"üë©‚Äç‚öïÔ∏è Doctor 24/7", linenLabel:"üßª Linen / towels",
       pickRoom:"Choose your apartment number", floor:"Floor", room:"Room", confirm:"Show", cancel:"Close",
       wifiStatus:"Is the Wi-Fi working?", ok:"Works", notOk:"Doesn‚Äôt work",
       pickSsid:"Pick the SSID", showMyWifi:"Show my password",
       aRooms:"üõèÔ∏è Rooms", aKitchen:"üç≥ Kitchen", aBathroom:"üõÅ Bathroom", aService:"üß∞ Laundry, luggage, trash" },

  // Dal≈°√≠ jazyky ‚Äì UI bere p≈ôesnƒõ zvolen√Ω jazyk:
  es:{ chooseLang:"Elige un idioma", mainTitle:"Elige un tema", subTitle:"Subtema", back:"‚Üê Atr√°s",
       instructionsLabel:"üìÑ Instrucciones de check-in",
       catFood:"Comida y alrededores", catTech:"Problemas t√©cnicos", catOther:"Otros", catTransport:"Transporte", catAmenities:"Servicios del hotel",
       tourLabel:"üß≠ Tour virtual 3D", tourOpenMsg:"[Abrir el tour 3D]("+MATTERPORT_URL+")",
       stillAsk:"Elige una de las opciones abajo.",
       contact:"Si no encuentras lo que necesitas, escribe a David (WhatsApp +420 733 439 733).",
       hide:"Ocultar",
       foodDelivery:"üõµ Delivery de comida", transportInfo:"üó∫Ô∏è Moverse por Praga",
       diningLabel:"üçΩÔ∏è Desayuno / Restaurantes", bakeryLabel:"ü•ñ Panader√≠as",
       cafeBarGroupLabel:"‚òï/üç∏ Caf√© / Bar", cafeLabel:"‚òï Caf√©s", barLabel:"üç∏ Bares",
       groceryLabel:"üõí Supermercados", pharmacyLabel:"üíä Farmacias",
       moneyGroupLabel:"üí± Casas de cambio / Cajeros", exchangeLabel:"üí± Casas de cambio", atmLabel:"üèß Cajeros autom√°ticos",
       wifiLabel:"üì∂ Wi-Fi", powerLabel:"‚ö° Electricidad", hotWaterLabel:"üíß Agua caliente",
       acLabel:"‚ùÑÔ∏è Aire acondicionado (AC)", inductionLabel:"üç≥ Placa de inducci√≥n", hoodLabel:"üåÄ Campana extractora",
       coffeeLabel:"‚òï Cafetera Tchibo", fireAlarmLabel:"üî• Detector de humo",
       elevatorPhoneLabel:"üõó Ascensor ‚Äì servicio", safeLabel:"üîê Caja fuerte",
       spareKeyLabel:"üîë Llave de repuesto",
       laundryLabel:"üß∫ Lavander√≠a", accessLabel:"‚ôøÔ∏è Accesibilidad", smokingLabel:"üö≠ Fumar",
       luggageLabel:"üéí Consigna de equipaje", doorbellsLabel:"üîî Timbres",
       gateLabel:"üö™ Puerta (interior)", trashLabel:"üóëÔ∏è Basura / contenedores",
       doctorLabel:"üë©‚Äç‚öïÔ∏è M√©dico 24/7", linenLabel:"üßª Ropa de cama / Toallas",
       pickRoom:"Elige el n√∫mero de apartamento", floor:"Planta", room:"Habitaci√≥n", confirm:"Mostrar", cancel:"Cerrar",
       wifiStatus:"¬øFunciona el Wi-Fi?", ok:"Funciona", notOk:"No funciona",
       pickSsid:"Elige el SSID", showMyWifi:"Mostrar mi contrase√±a",
       aRooms:"üõèÔ∏è Habitaciones", aKitchen:"üç≥ Cocina", aBathroom:"üõÅ Ba√±o", aService:"üß∞ Lavander√≠a, consigna, basura" },

  de:{ chooseLang:"Sprache ausw√§hlen", mainTitle:"Thema w√§hlen", subTitle:"Unterthema", back:"‚Üê Zur√ºck",
       instructionsLabel:"üìÑ Check-in-Anleitung",
       catFood:"Essen & Umgebung", catTech:"Technische Probleme", catOther:"Sonstiges", catTransport:"Transport", catAmenities:"Hotelausstattung",
       tourLabel:"üß≠ 3D-Rundgang", tourOpenMsg:"[3D-Rundgang √∂ffnen]("+MATTERPORT_URL+")",
       stillAsk:"W√§hle eine Option unten.",
       contact:"Falls Sie nicht finden, was Sie brauchen, schreiben Sie David (WhatsApp +420 733 439 733).",
       hide:"Ausblenden",
       foodDelivery:"üõµ Essen liefern lassen", transportInfo:"üó∫Ô∏è Unterwegs in Prag",
       diningLabel:"üçΩÔ∏è Fr√ºhst√ºck / Restaurants", bakeryLabel:"ü•ñ B√§ckereien",
       cafeBarGroupLabel:"‚òï/üç∏ Caf√© / Bar", cafeLabel:"‚òï Caf√©s", barLabel:"üç∏ Bars",
       groceryLabel:"üõí Superm√§rkte", pharmacyLabel:"üíä Apotheken",
       moneyGroupLabel:"üí± Wechselstuben / Geldautomaten", exchangeLabel:"üí± Wechselstuben", atmLabel:"üèß Geldautomaten",
       wifiLabel:"üì∂ Wi-Fi", powerLabel:"‚ö° Strom", hotWaterLabel:"üíß Warmwasser",
       acLabel:"‚ùÑÔ∏è Klimaanlage (AC)", inductionLabel:"üç≥ Induktionskochfeld", hoodLabel:"üåÄ Dunstabzug",
       coffeeLabel:"‚òï Tchibo-Kaffeemaschine", fireAlarmLabel:"üî• Rauchmelder",
       elevatorPhoneLabel:"üõó Aufzug ‚Äì Service", safeLabel:"üîê Safe",
       spareKeyLabel:"üîë Ersatzschl√ºssel",
       laundryLabel:"üß∫ W√§scherei", accessLabel:"‚ôøÔ∏è Barrierefreiheit", smokingLabel:"üö≠ Rauchen",
       luggageLabel:"üéí Gep√§ckaufbewahrung", doorbellsLabel:"üîî Klingeln",
       gateLabel:"üö™ Tor (innen)", trashLabel:"üóëÔ∏è M√ºll / Tonnen",
       doctorLabel:"üë©‚Äç‚öïÔ∏è Arzt 24/7", linenLabel:"üßª Bettw√§sche / Handt√ºcher",
       pickRoom:"Apartmentnummer ausw√§hlen", floor:"Stockwerk", room:"Zimmer", confirm:"Anzeigen", cancel:"Schlie√üen",
       wifiStatus:"Funktioniert das Wi-Fi?", ok:"Funktioniert", notOk:"Funktioniert nicht",
       pickSsid:"SSID ausw√§hlen", showMyWifi:"Mein Passwort anzeigen",
       aRooms:"üõèÔ∏è Zimmer", aKitchen:"üç≥ K√ºche", aBathroom:"üõÅ Badezimmer", aService:"üß∞ W√§scherei, Gep√§ck, M√ºll" },

  fr:{ chooseLang:"Choisissez la langue", mainTitle:"Choisissez un sujet", subTitle:"Sous-sujet", back:"‚Üê Retour",
       instructionsLabel:"üìÑ Instructions de check-in",
       catFood:"Nourriture & alentours", catTech:"Probl√®mes techniques", catOther:"Autres", catTransport:"Transport", catAmenities:"Services de l‚Äôh√¥tel",
       tourLabel:"üß≠ Visite virtuelle 3D", tourOpenMsg:"[Ouvrir la visite 3D]("+MATTERPORT_URL+")",
       stillAsk:"Choisissez une option ci-dessous.",
       contact:"Si vous ne trouvez pas ce qu‚Äôil vous faut, contactez David (WhatsApp +420 733 439 733).",
       hide:"Masquer",
       foodDelivery:"üõµ Livraison de repas", transportInfo:"üó∫Ô∏è Se d√©placer √† Prague",
       diningLabel:"üçΩÔ∏è Petit-d√©jeuner / Restaurants", bakeryLabel:"ü•ñ Boulangeries",
       cafeBarGroupLabel:"‚òï/üç∏ Caf√© / Bar", cafeLabel:"‚òï Caf√©s", barLabel:"üç∏ Bars",
       groceryLabel:"üõí √âpiceries", pharmacyLabel:"üíä Pharmacies",
       moneyGroupLabel:"üí± Bureaux de change / DAB", exchangeLabel:"üí± Bureaux de change", atmLabel:"üèß Distributeurs",
       wifiLabel:"üì∂ Wi-Fi", powerLabel:"‚ö° √âlectricit√©", hotWaterLabel:"üíß Eau chaude",
       acLabel:"‚ùÑÔ∏è Climatisation (AC)", inductionLabel:"üç≥ Plaque √† induction", hoodLabel:"üåÄ Hotte",
       coffeeLabel:"‚òï Machine √† caf√© Tchibo", fireAlarmLabel:"üî• D√©tecteur de fum√©e",
       elevatorPhoneLabel:"üõó Ascenseur ‚Äì service", safeLabel:"üîê Coffre-fort",
       spareKeyLabel:"üîë Cl√© de secours",
       laundryLabel:"üß∫ Laverie", accessLabel:"‚ôøÔ∏è Accessibilit√©", smokingLabel:"üö≠ Fumer",
       luggageLabel:"üéí Consigne √† bagages", doorbellsLabel:"üîî Sonnette",
       gateLabel:"üö™ Portail (int√©rieur)", trashLabel:"üóëÔ∏è Poubelles / d√©chets",
       doctorLabel:"üë©‚Äç‚öïÔ∏è M√©decin 24/7", linenLabel:"üßª Linge / Serviettes",
       pickRoom:"Choisissez votre num√©ro d‚Äôappartement", floor:"√âtage", room:"Pi√®ce", confirm:"Afficher", cancel:"Fermer",
       wifiStatus:"Le Wi-Fi fonctionne ?", ok:"Fonctionne", notOk:"Ne fonctionne pas",
       pickSsid:"Choisir le SSID", showMyWifi:"Afficher mon mot de passe",
       aRooms:"üõèÔ∏è Chambres", aKitchen:"üç≥ Cuisine", aBathroom:"üõÅ Salle de bain", aService:"üß∞ Laverie, bagages, d√©chets" },

  ru:{ chooseLang:"–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", mainTitle:"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É", subTitle:"–ü–æ–¥—Ç–µ–º–∞", back:"‚Üê –ù–∞–∑–∞–¥",
       instructionsLabel:"üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞—Å–µ–ª–µ–Ω–∏—é",
       catFood:"–ï–¥–∞ –∏ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏", catTech:"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã", catOther:"–î—Ä—É–≥–æ–µ", catTransport:"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", catAmenities:"–£–¥–æ–±—Å—Ç–≤–∞ –æ—Ç–µ–ª—è",
       tourLabel:"üß≠ 3D-—Ç—É—Ä –ø–æ –æ—Ç–µ–ª—é", tourOpenMsg:"[–û—Ç–∫—Ä—ã—Ç—å 3D-—Ç—É—Ä]("+MATTERPORT_URL+")",
       stillAsk:"–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ.",
       contact:"–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–ø–∏—à–∏—Ç–µ –î–∞–≤–∏–¥—É (WhatsApp +420 733 439 733).",
       hide:"–°–∫—Ä—ã—Ç—å",
       foodDelivery:"üõµ –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã", transportInfo:"üó∫Ô∏è –ö–∞–∫ –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –ü—Ä–∞–≥–µ",
       diningLabel:"üçΩÔ∏è –ó–∞–≤—Ç—Ä–∞–∫ / –†–µ—Å—Ç–æ—Ä–∞–Ω—ã", bakeryLabel:"ü•ñ –ü–µ–∫–∞—Ä–Ω–∏",
       cafeBarGroupLabel:"‚òï/üç∏ –ö–∞—Ñ–µ / –ë–∞—Ä", cafeLabel:"‚òï –ö–∞—Ñ–µ", barLabel:"üç∏ –ë–∞—Ä—ã",
       groceryLabel:"üõí –°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã", pharmacyLabel:"üíä –ê–ø—Ç–µ–∫–∏",
       moneyGroupLabel:"üí± –û–±–º–µ–Ω / –ë–∞–Ω–∫–æ–º–∞—Ç—ã", exchangeLabel:"üí± –û–±–º–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã", atmLabel:"üèß –ë–∞–Ω–∫–æ–º–∞—Ç—ã",
       wifiLabel:"üì∂ Wi-Fi", powerLabel:"‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", hotWaterLabel:"üíß –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞",
       acLabel:"‚ùÑÔ∏è –ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä (AC)", inductionLabel:"üç≥ –ò–Ω–¥—É–∫—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∏—Ç–∞", hoodLabel:"üåÄ –í—ã—Ç—è–∂–∫–∞",
       coffeeLabel:"‚òï –ö–æ—Ñ–µ–º–∞—à–∏–Ω–∞ Tchibo", fireAlarmLabel:"üî• –ü–æ–∂–∞—Ä–Ω—ã–π –¥–∞—Ç—á–∏–∫",
       elevatorPhoneLabel:"üõó –õ–∏—Ñ—Ç ‚Äì —Å–µ—Ä–≤–∏—Å", safeLabel:"üîê –°–µ–π—Ñ",
       spareKeyLabel:"üîë –ó–∞–ø–∞—Å–Ω–æ–π –∫–ª—é—á",
       laundryLabel:"üß∫ –ü—Ä–∞—á–µ—á–Ω–∞—è", accessLabel:"‚ôøÔ∏è –ë–µ–∑–±–∞—Ä—å–µ—Ä–Ω–æ—Å—Ç—å", smokingLabel:"üö≠ –ö—É—Ä–µ–Ω–∏–µ",
       luggageLabel:"üéí –ö–∞–º–µ—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è", doorbellsLabel:"üîî –î–æ–º–æ—Ñ–æ–Ω—ã",
       gateLabel:"üö™ –í–æ—Ä–æ—Ç–∞ (–∏–∑–Ω—É—Ç—Ä–∏)", trashLabel:"üóëÔ∏è –ú—É—Å–æ—Ä / –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã",
       doctorLabel:"üë©‚Äç‚öïÔ∏è –í—Ä–∞—á 24/7", linenLabel:"üßª –ü–æ—Å—Ç–µ–ª—å / –ü–æ–ª–æ—Ç–µ–Ω—Ü–∞",
       pickRoom:"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞", floor:"–≠—Ç–∞–∂", room:"–ö–æ–º–Ω–∞—Ç–∞", confirm:"–ü–æ–∫–∞–∑–∞—Ç—å", cancel:"–ó–∞–∫—Ä—ã—Ç—å",
       wifiStatus:"–†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ Wi-Fi?", ok:"–†–∞–±–æ—Ç–∞–µ—Ç", notOk:"–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
       pickSsid:"–í—ã–±–µ—Ä–∏—Ç–µ SSID", showMyWifi:"–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–π –ø–∞—Ä–æ–ª—å",
       aRooms:"üõèÔ∏è –ö–æ–º–Ω–∞—Ç—ã", aKitchen:"üç≥ –ö—É—Ö–Ω—è", aBathroom:"üõÅ –í–∞–Ω–Ω–∞—è", aService:"üß∞ –ü—Ä–∞—á–µ—á–Ω–∞—è, –±–∞–≥–∞–∂, –º—É—Å–æ—Ä" },

  uk:{ chooseLang:"–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É", mainTitle:"–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É", subTitle:"–ü—ñ–¥—Ç–µ–º–∞", back:"‚Üê –ù–∞–∑–∞–¥",
       instructionsLabel:"üìÑ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –ø–æ—Å–µ–ª–µ–Ω–Ω—è",
       catFood:"–á–∂–∞ —Ç–∞ –ø–æ—Ä—É—á", catTech:"–¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è", catOther:"–Ü–Ω—à–µ", catTransport:"–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", catAmenities:"–ó—Ä—É—á–Ω–æ—Å—Ç—ñ –≥–æ—Ç–µ–ª—é",
       tourLabel:"üß≠ 3D-—Ç—É—Ä –≥–æ—Ç–µ–ª–µ–º", tourOpenMsg:"[–í—ñ–¥–∫—Ä–∏—Ç–∏ 3D-—Ç—É—Ä]("+MATTERPORT_URL+")",
       stillAsk:"–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∏–∂—á–µ.",
       contact:"–Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é, –Ω–∞–ø–∏—à—ñ—Ç—å –î–∞–≤–∏–¥—É (WhatsApp +420 733 439 733).",
       hide:"–ü—Ä–∏—Ö–æ–≤–∞—Ç–∏",
       foodDelivery:"üõµ –î–æ—Å—Ç–∞–≤–∫–∞ —ó–∂—ñ", transportInfo:"üó∫Ô∏è –ü–µ—Ä–µ—Å—É–≤–∞–Ω–Ω—è –ü—Ä–∞–≥–æ—é",
       diningLabel:"üçΩÔ∏è –°–Ω—ñ–¥–∞–Ω–æ–∫ / –†–µ—Å—Ç–æ—Ä–∞–Ω–∏", bakeryLabel:"ü•ñ –ü–µ–∫–∞—Ä–Ω—ñ",
       cafeBarGroupLabel:"‚òï/üç∏ –ö–∞–≤‚Äô—è—Ä–Ω—è / –ë–∞—Ä", cafeLabel:"‚òï –ö–∞–≤‚Äô—è—Ä–Ω—ñ", barLabel:"üç∏ –ë–∞—Ä–∏",
       groceryLabel:"üõí –°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç–∏", pharmacyLabel:"üíä –ê–ø—Ç–µ–∫–∏",
       moneyGroupLabel:"üí± –û–±–º—ñ–Ω / –ë–∞–Ω–∫–æ–º–∞—Ç–∏", exchangeLabel:"üí± –û–±–º—ñ–Ω –≤–∞–ª—é—Ç", atmLabel:"üèß –ë–∞–Ω–∫–æ–º–∞—Ç–∏",
       wifiLabel:"üì∂ Wi-Fi", powerLabel:"‚ö° –ï–ª–µ–∫—Ç—Ä–∏–∫–∞", hotWaterLabel:"üíß –ì–∞—Ä—è—á–∞ –≤–æ–¥–∞",
       acLabel:"‚ùÑÔ∏è –ö–æ–Ω–¥–∏—Ü—ñ–æ–Ω–µ—Ä (AC)", inductionLabel:"üç≥ –Ü–Ω–¥—É–∫—Ü—ñ–π–Ω–∞ –ø–ª–∏—Ç–∞", hoodLabel:"üåÄ –í–∏—Ç—è–∂–∫–∞",
       coffeeLabel:"‚òï –ö–∞–≤–æ–≤–∞—Ä–∫–∞ Tchibo", fireAlarmLabel:"üî• –ü–æ–∂–µ–∂–Ω–∏–π –¥–∞—Ç—á–∏–∫",
       elevatorPhoneLabel:"üõó –õ—ñ—Ñ—Ç ‚Äì —Å–µ—Ä–≤—ñ—Å", safeLabel:"üîê –°–µ–π—Ñ",
       spareKeyLabel:"üîë –ó–∞–ø–∞—Å–Ω–∏–π –∫–ª—é—á",
       laundryLabel:"üß∫ –ü—Ä–∞–ª—å–Ω—è", accessLabel:"‚ôøÔ∏è –ë–µ–∑–±–∞—Ä‚Äô—î—Ä–Ω—ñ—Å—Ç—å", smokingLabel:"üö≠ –ü–∞–ª—ñ–Ω–Ω—è",
       luggageLabel:"üéí –ö–∞–º–µ—Ä–∞ –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è", doorbellsLabel:"üîî –î–∑–≤—ñ–Ω–∫–∏",
       gateLabel:"üö™ –í–æ—Ä–æ—Ç–∞ (–∑—Å–µ—Ä–µ–¥–∏–Ω–∏)", trashLabel:"üóëÔ∏è –°–º—ñ—Ç—Ç—è / –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏",
       doctorLabel:"üë©‚Äç‚öïÔ∏è –õ—ñ–∫–∞—Ä 24/7", linenLabel:"üßª –ü–æ—Å—Ç—ñ–ª—å / –†—É—à–Ω–∏–∫–∏",
       pickRoom:"–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—É", floor:"–ü–æ–≤–µ—Ä—Ö", room:"–ö—ñ–º–Ω–∞—Ç–∞", confirm:"–ü–æ–∫–∞–∑–∞—Ç–∏", cancel:"–ó–∞–∫—Ä–∏—Ç–∏",
       wifiStatus:"–ü—Ä–∞—Ü—é—î Wi-Fi?", ok:"–ü—Ä–∞—Ü—é—î", notOk:"–ù–µ –ø—Ä–∞—Ü—é—î",
       pickSsid:"–û–±–µ—Ä—ñ—Ç—å SSID", showMyWifi:"–ü–æ–∫–∞–∑–∞—Ç–∏ –º—ñ–π –ø–∞—Ä–æ–ª—å",
       aRooms:"üõèÔ∏è –ö—ñ–º–Ω–∞—Ç–∏", aKitchen:"üç≥ –ö—É—Ö–Ω—è", aBathroom:"üõÅ –í–∞–Ω–Ω–∞", aService:"üß∞ –ü—Ä–∞–ª—å–Ω—è, –±–∞–≥–∞–∂, —Å–º—ñ—Ç—Ç—è" },

  nl:{ chooseLang:"Kies een taal", mainTitle:"Kies een onderwerp", subTitle:"Subonderwerp", back:"‚Üê Terug",
       instructionsLabel:"üìÑ Check-in instructies",
       catFood:"Eten & in de buurt", catTech:"Technische problemen", catOther:"Overig", catTransport:"Vervoer", catAmenities:"Hotelfaciliteiten",
       tourLabel:"üß≠ 3D-tour", tourOpenMsg:"[3D-tour openen]("+MATTERPORT_URL+")",
       stillAsk:"Kies een optie hieronder.",
       contact:"Kun je niet vinden wat je zoekt? Stuur David een bericht (WhatsApp +420 733 439 733).",
       hide:"Verbergen",
       foodDelivery:"üõµ Maaltijdbezorging", transportInfo:"üó∫Ô∏è Reizen door Praag",
       diningLabel:"üçΩÔ∏è Ontbijt / Restaurants", bakeryLabel:"ü•ñ Bakkerijen",
       cafeBarGroupLabel:"‚òï/üç∏ Caf√© / Bar", cafeLabel:"‚òï Caf√©s", barLabel:"üç∏ Bars",
       groceryLabel:"üõí Supermarkten", pharmacyLabel:"üíä Apotheken",
       moneyGroupLabel:"üí± Wisselkantoren / Geldautomaten", exchangeLabel:"üí± Wisselkantoren", atmLabel:"üèß Geldautomaten",
       wifiLabel:"üì∂ Wi-Fi", powerLabel:"‚ö° Elektriciteit", hotWaterLabel:"üíß Warm water",
       acLabel:"‚ùÑÔ∏è Airconditioning (AC)", inductionLabel:"üç≥ Inductiekookplaat", hoodLabel:"üåÄ Afzuigkap",
       coffeeLabel:"‚òï Tchibo-koffiemachine", fireAlarmLabel:"üî• Brandmelder",
       elevatorPhoneLabel:"üõó Lift ‚Äì service", safeLabel:"üîê Kluis",
       spareKeyLabel:"üîë Reserv√©sleutel",
       laundryLabel:"üß∫ Wasserij", accessLabel:"‚ôøÔ∏è Toegankelijkheid", smokingLabel:"üö≠ Roken",
       luggageLabel:"üéí Bagageopslag", doorbellsLabel:"üîî Deurbellen",
       gateLabel:"üö™ Poort (binnenzijde)", trashLabel:"üóëÔ∏è Afval / containers",
       doctorLabel:"üë©‚Äç‚öïÔ∏è Arts 24/7", linenLabel:"üßª Beddengoed / Handdoeken",
       pickRoom:"Kies je appartementnummer", floor:"Verdieping", room:"Kamer", confirm:"Weergeven", cancel:"Sluiten",
       wifiStatus:"Werkt de Wi-Fi?", ok:"Werkt", notOk:"Werkt niet",
       pickSsid:"Kies de SSID", showMyWifi:"Mijn wachtwoord tonen",
       aRooms:"üõèÔ∏è Kamers", aKitchen:"üç≥ Keuken", aBathroom:"üõÅ Badkamer", aService:"üß∞ Wasserij, bagage, afval" },

  it:{ chooseLang:"Scegli la lingua", mainTitle:"Scegli un argomento", subTitle:"Sottoargomento", back:"‚Üê Indietro",
       instructionsLabel:"üìÑ Istruzioni di check-in",
       catFood:"Cibo e dintorni", catTech:"Problemi tecnici", catOther:"Altro", catTransport:"Trasporti", catAmenities:"Servizi dell‚Äôhotel",
       tourLabel:"üß≠ Tour 3D", tourOpenMsg:"[Apri il tour 3D]("+MATTERPORT_URL+")",
       stillAsk:"Scegli una delle opzioni sotto.",
       contact:"Se non trovi ci√≤ che ti serve, scrivi a David (WhatsApp +420 733 439 733).",
       hide:"Nascondi",
       foodDelivery:"üõµ Consegna di cibo", transportInfo:"üó∫Ô∏è Muoversi a Praga",
       diningLabel:"üçΩÔ∏è Colazione / Ristoranti", bakeryLabel:"ü•ñ Panetterie",
       cafeBarGroupLabel:"‚òï/üç∏ Caff√® / Bar", cafeLabel:"‚òï Caffetterie", barLabel:"üç∏ Bar",
       groceryLabel:"üõí Supermercati", pharmacyLabel:"üíä Farmacie",
       moneyGroupLabel:"üí± Cambio / Bancomat", exchangeLabel:"üí± Cambiavalute", atmLabel:"üèß Bancomat",
       wifiLabel:"üì∂ Wi-Fi", powerLabel:"‚ö° Elettricit√†", hotWaterLabel:"üíß Acqua calda",
       acLabel:"‚ùÑÔ∏è Aria condizionata (AC)", inductionLabel:"üç≥ Piano a induzione", hoodLabel:"üåÄ Cappa aspirante",
       coffeeLabel:"‚òï Macchina da caff√® Tchibo", fireAlarmLabel:"üî• Rilevatore di fumo",
       elevatorPhoneLabel:"üõó Ascensore ‚Äì assistenza", safeLabel:"üîê Cassaforte",
       spareKeyLabel:"üîë Chiave di riserva",
       laundryLabel:"üß∫ Lavanderia", accessLabel:"‚ôøÔ∏è Accessibilit√†", smokingLabel:"üö≠ Fumo",
       luggageLabel:"üéí Deposito bagagli", doorbellsLabel:"üîî Campanelli",
       gateLabel:"üö™ Cancello (interno)", trashLabel:"üóëÔ∏è Rifiuti / bidoni",
       doctorLabel:"üë©‚Äç‚öïÔ∏è Medico 24/7", linenLabel:"üßª Lenzuola / Asciugamani",
       pickRoom:"Scegli il numero dell‚Äôappartamento", floor:"Piano", room:"Camera", confirm:"Mostra", cancel:"Chiudi",
       wifiStatus:"Il Wi-Fi funziona?", ok:"Funziona", notOk:"Non funziona",
       pickSsid:"Scegli l‚ÄôSSID", showMyWifi:"Mostra la mia password",
       aRooms:"üõèÔ∏è Camere", aKitchen:"üç≥ Cucina", aBathroom:"üõÅ Bagno", aService:"üß∞ Lavanderia, deposito, rifiuti" },

  da:{ chooseLang:"V√¶lg sprog", mainTitle:"V√¶lg et emne", subTitle:"Underemne", back:"‚Üê Tilbage",
       instructionsLabel:"üìÑ Check-in instruktioner",
       catFood:"Mad og n√¶romr√•de", catTech:"Tekniske problemer", catOther:"Andet", catTransport:"Transport", catAmenities:"Hotelfaciliteter",
       tourLabel:"üß≠ 3D-rundtur", tourOpenMsg:"[√Öbn 3D-rundturen]("+MATTERPORT_URL+")",
       stillAsk:"V√¶lg en af mulighederne herunder.",
       contact:"Hvis du ikke finder det, du har brug for, s√• skriv til David (WhatsApp +420 733 439 733).",
       hide:"Skjul",
       foodDelivery:"üõµ Madudbringning", transportInfo:"üó∫Ô∏è Rundt i Prag",
       diningLabel:"üçΩÔ∏è Morgenmad / Restauranter", bakeryLabel:"ü•ñ Bagerier",
       cafeBarGroupLabel:"‚òï/üç∏ Caf√© / Bar", cafeLabel:"‚òï Caf√©er", barLabel:"üç∏ Barer",
       groceryLabel:"üõí Dagligvarebutikker", pharmacyLabel:"üíä Apoteker",
       moneyGroupLabel:"üí± Veksling / H√¶veautomater", exchangeLabel:"üí± Vekselkontorer", atmLabel:"üèß H√¶veautomater",
       wifiLabel:"üì∂ Wi-Fi", powerLabel:"‚ö° Str√∏m", hotWaterLabel:"üíß Varmt vand",
       acLabel:"‚ùÑÔ∏è Aircondition (AC)", inductionLabel:"üç≥ Induktionskogeplade", hoodLabel:"üåÄ Emh√¶tte",
       coffeeLabel:"‚òï Tchibo kaffemaskine", fireAlarmLabel:"üî• R√∏galarm",
       elevatorPhoneLabel:"üõó Elevator ‚Äì service", safeLabel:"üîê Pengeskab",
       spareKeyLabel:"üîë Ekstra n√∏gle",
       laundryLabel:"üß∫ Vaskeri", accessLabel:"‚ôøÔ∏è Tilg√¶ngelighed", smokingLabel:"üö≠ Rygning",
       luggageLabel:"üéí Bagageopbevaring", doorbellsLabel:"üîî D√∏rklokker",
       gateLabel:"üö™ Port (indvendig)", trashLabel:"üóëÔ∏è Affald / beholdere",
       doctorLabel:"üë©‚Äç‚öïÔ∏è L√¶ge 24/7", linenLabel:"üßª Senget√∏j / H√•ndkl√¶der",
       pickRoom:"V√¶lg dit lejlighedsnummer", floor:"Etage", room:"V√¶relse", confirm:"Vis", cancel:"Luk",
       wifiStatus:"Virker Wi-Fi'en?", ok:"Virker", notOk:"Virker ikke",
       pickSsid:"V√¶lg SSID", showMyWifi:"Vis min adgangskode",
       aRooms:"üõèÔ∏è V√¶relser", aKitchen:"üç≥ K√∏kken", aBathroom:"üõÅ Badev√¶relse", aService:"üß∞ Vaskeri, bagage, affald" },

  pl:{ chooseLang:"Wybierz jƒôzyk", mainTitle:"Wybierz temat", subTitle:"Podtemat", back:"‚Üê Wstecz",
       instructionsLabel:"üìÑ Instrukcje zameldowania",
       catFood:"Jedzenie i okolica", catTech:"Problemy techniczne", catOther:"Inne", catTransport:"Transport", catAmenities:"Udogodnienia hotelu",
       tourLabel:"üß≠ Wirtualna wycieczka 3D", tourOpenMsg:"[Otw√≥rz wycieczkƒô 3D]("+MATTERPORT_URL+")",
       stillAsk:"Wybierz jednƒÖ z opcji poni≈ºej.",
       contact:"Je≈õli nie znajdziesz potrzebnych informacji, napisz do Davida (WhatsApp +420 733 439 733).",
       hide:"Ukryj",
       foodDelivery:"üõµ Dostawa jedzenia", transportInfo:"üó∫Ô∏è Poruszanie siƒô po Pradze",
       diningLabel:"üçΩÔ∏è ≈öniadania / Restauracje", bakeryLabel:"ü•ñ Piekarnie",
       cafeBarGroupLabel:"‚òï/üç∏ Kawiarnia / Bar", cafeLabel:"‚òï Kawiarnie", barLabel:"üç∏ Bary",
       groceryLabel:"üõí Sklepy spo≈ºywcze", pharmacyLabel:"üíä Apteki",
       moneyGroupLabel:"üí± Kantory / Bankomaty", exchangeLabel:"üí± Kantory", atmLabel:"üèß Bankomaty",
       wifiLabel:"üì∂ Wi-Fi", powerLabel:"‚ö° PrƒÖd", hotWaterLabel:"üíß Ciep≈Ça woda",
       acLabel:"‚ùÑÔ∏è Klimatyzacja (AC)", inductionLabel:"üç≥ P≈Çyta indukcyjna", hoodLabel:"üåÄ Okap",
       coffeeLabel:"‚òï Ekspres Tchibo", fireAlarmLabel:"üî• Czujnik dymu",
       elevatorPhoneLabel:"üõó Winda ‚Äì serwis", safeLabel:"üîê Sejf",
       spareKeyLabel:"üîë Zapasowy klucz",
       laundryLabel:"üß∫ Pralnia", accessLabel:"‚ôøÔ∏è Dostƒôpno≈õƒá", smokingLabel:"üö≠ Palenie",
       luggageLabel:"üéí Przechowalnia baga≈ºu", doorbellsLabel:"üîî Dzwonki",
       gateLabel:"üö™ Brama (od ≈õrodka)", trashLabel:"üóëÔ∏è ≈ömieci / kosze",
       doctorLabel:"üë©‚Äç‚öïÔ∏è Lekarz 24/7", linenLabel:"üßª Po≈õciel / Rƒôczniki",
       pickRoom:"Wybierz numer apartamentu", floor:"Piƒôtro", room:"Pok√≥j", confirm:"Poka≈º", cancel:"Zamknij",
       wifiStatus:"Czy Wi-Fi dzia≈Ça?", ok:"Dzia≈Ça", notOk:"Nie dzia≈Ça",
       pickSsid:"Wybierz SSID", showMyWifi:"Poka≈º moje has≈Ço",
       aRooms:"üõèÔ∏è Pokoje", aKitchen:"üç≥ Kuchnia", aBathroom:"üõÅ ≈Åazienka", aService:"üß∞ Pralnia, baga≈º, ≈õmieci" }
};

/** ===== helper bez fallbacku ===== */
// Pou≈æij v≈ædy JEN aktivn√≠ jazyk; pokud kl√≠ƒç chyb√≠, vra≈• n√°zev kl√≠ƒçe (aby se chyba odhalila).
const t = (lang, key) => (tr[lang] && tr[lang][key]) ?? key;

/** ================== barvy ============== */
const btnColorForIndex = (i) =>
  [ "var(--blue)", "var(--red)", "var(--yellow)", "var(--green)" ][i % 4];

/** ================== App ================== */
export default function App(){
  const [lang, setLang] = useState(null);
  const [stack, setStack] = useState([]);
  const [chat, setChat]   = useState([]);
  const [loading, setLoading] = useState(false);
  const [shortcutsOpen, setShortcutsOpen] = useState(true);

  // Overlays
  const [roomSheet, setRoomSheet] = useState({ open:false, floor:null, last:null }); // keys (intern√≠)
  const [wifiRoomSheet, setWifiRoomSheet] = useState({ open:false, floor:null, last:null });
  const [wifiSsidSheet, setWifiSsidSheet] = useState({ open:false, ssid:null });

  // CTA tlaƒç√≠tka pod bublinou
  const [showKeysCta, setShowKeysCta] = useState(false);
  const [wifiCtas, setWifiCtas] = useState({ showPassword:false, showNotOk:false });

  const scrollerRef = useRef(null);
  const shortcutsRef = useRef(null);

  const scrollToShortcuts = () => {
    requestAnimationFrame(() => {
      shortcutsRef.current?.scrollIntoView({ behavior: "smooth", block: "start" });
    });
  };

  useEffect(() => {
    if (lang) document.body.classList.add("lang-selected"); else document.body.classList.remove("lang-selected");
  }, [lang]);

  // Autoscroll k posledn√≠ bublinƒõ bota
  useEffect(() => {
    const scroller = scrollerRef.current;
    if (!scroller) return;
    const bots = scroller.querySelectorAll(".bubble.bot");
    const lastBot = bots[bots.length - 1];
    if (lastBot) {
      const top = lastBot.offsetTop - 8;
      scroller.scrollTo({ top, behavior: "auto" });
    } else {
      scroller.scrollTo({ top: scroller.scrollHeight, behavior: "auto" });
    }
  }, [chat]);

  // Po otev≈ôen√≠ zkratek skoƒç na nƒõ
  useEffect(() => {
    if (lang && shortcutsOpen) scrollToShortcuts();
  }, [lang, shortcutsOpen]);

  /** ====== FLOWS ====== */
  function makeFlows(activeLang){
    const FOOD = [
      { label: t(activeLang,"diningLabel"),   control:{ intent:"local", sub:"dining" } },
      { label: t(activeLang,"bakeryLabel"),   control:{ intent:"local", sub:"bakery" } },
      { label: t(activeLang,"cafeBarGroupLabel"), children:[
        { label: t(activeLang,"cafeLabel"), control:{ intent:"local", sub:"cafe" } },
        { label: t(activeLang,"barLabel"),  control:{ intent:"local", sub:"bar"  } },
      ]},
      { label: t(activeLang,"groceryLabel"),  control:{ intent:"local", sub:"grocery" } },
      { label: t(activeLang,"pharmacyLabel"), control:{ intent:"local", sub:"pharmacy" } },
      { label: t(activeLang,"foodDelivery"),  control:{ intent:"tech",  sub:"food_delivery" } },
      { label: t(activeLang,"moneyGroupLabel"), children:[
        { label: t(activeLang,"exchangeLabel"), control:{ intent:"local", sub:"exchange" } },
        { label: t(activeLang,"atmLabel"),      control:{ intent:"local", sub:"atm" } },
      ]},
    ];

    const TECH = [
      { label: t(activeLang,"wifiLabel"),            control:{ intent:"tech", sub:"wifi", kind:"wifi" } },
      { label: t(activeLang,"powerLabel"),           control:{ intent:"tech", sub:"power" } },
      { label: t(activeLang,"hotWaterLabel"),        control:{ intent:"tech", sub:"hot_water" } },
      { label: t(activeLang,"acLabel"),              control:{ intent:"tech", sub:"ac" } },
      { label: t(activeLang,"inductionLabel"),       control:{ intent:"tech", sub:"induction" } },
      { label: t(activeLang,"hoodLabel"),            control:{ intent:"tech", sub:"hood" } },
      { label: t(activeLang,"coffeeLabel"),          control:{ intent:"tech", sub:"coffee" } },
      { label: t(activeLang,"fireAlarmLabel"),       control:{ intent:"tech", sub:"fire_alarm" } },
      { label: t(activeLang,"elevatorPhoneLabel"),   control:{ intent:"tech", sub:"elevator_phone" } },
      { label: t(activeLang,"safeLabel"),            control:{ intent:"tech", sub:"safe" } },
      { label: t(activeLang,"spareKeyLabel"),        control:{ intent:"tech", sub:"keys" } },
    ];

    const TRANSPORT = [
      { label: t(activeLang,"transportInfo"), control:{ intent:"tech", sub:"transport" } },
    ];

    const AMENITIES = [
      { label: t(activeLang,"aRooms"),   control:{ intent:"amenities", sub:"rooms" } },
      { label: t(activeLang,"aKitchen"), control:{ intent:"amenities", sub:"kitchen" } },
      { label: t(activeLang,"aBathroom"),control:{ intent:"amenities", sub:"bathroom" } },
      { label: t(activeLang,"aService"), control:{ intent:"amenities", sub:"service" } },
    ];

    const OTHER = [
      { label: t(activeLang,"laundryLabel"),     control:{ intent:"tech", sub:"laundry" } },
      { label: t(activeLang,"accessLabel"),      control:{ intent:"tech", sub:"access" } },
      { label: t(activeLang,"smokingLabel"),     control:{ intent:"tech", sub:"smoking" } },
      { label: t(activeLang,"luggageLabel"),     control:{ intent:"tech", sub:"luggage" } },
      { label: t(activeLang,"doorbellsLabel"),   control:{ intent:"tech", sub:"doorbells" } },
      { label: t(activeLang,"gateLabel"),        control:{ intent:"tech", sub:"gate" } },
      { label: t(activeLang,"trashLabel"),       control:{ intent:"tech", sub:"trash" } },
      { label: t(activeLang,"doctorLabel"),      control:{ intent:"tech", sub:"doctor" } },
      { label: t(activeLang,"linenLabel"),       control:{ intent:"tech", sub:"linen_towels" } },
    ];

    return [
      { label: t(activeLang,"instructionsLabel"), control:{ intent:"tech", sub:"stay_instructions" } },
      { label: t(activeLang,"tourLabel"), action:"tour" },
      { label: t(activeLang,"wifiLabel"), control:{ intent:"tech", sub:"wifi", kind:"wifi" } },
      { label: t(activeLang,"catFood"),      children:FOOD },
      { label: t(activeLang,"catTech"),      children:TECH },
      { label: t(activeLang,"catTransport"), children:TRANSPORT },
      { label: t(activeLang,"catAmenities"), children:AMENITIES },
      { label: t(activeLang,"catOther"),     children:OTHER },
    ];
  }
  const FLOWS = useMemo(() => (lang ? makeFlows(lang) : []), [lang]);

  function renderAssistant(md=""){
    const raw = marked.parse(md, { breaks:true });
    const clean = DOMPurify.sanitize(raw);
    return <div className="bubble bot" dangerouslySetInnerHTML={{ __html: clean }} />;
  }

  async function callBackend(payload){
    setLoading(true);
    try{
      const r = await fetch("/.netlify/functions/concierge", {
        method:"POST", headers:{ "Content-Type":"application/json" }, body: JSON.stringify(payload)
      });
      const data = await r.json();
      setChat(c => [...c, { role:"assistant", content:data.reply }]);
    }catch{
      setChat(c => [...c, { role:"assistant", content:"‚ö†Ô∏è Nelze se p≈ôipojit k serveru. Zkuste to pros√≠m znovu." }]);
    }finally{ setLoading(false); }
  }

  function sendControl(promptText, control){
    const next = [...chat, { role:"user", content:promptText }];
    setChat(next);
    return callBackend({ messages: next, uiLang: lang, control });
  }
  function sendText(text){
    const next = [...chat, { role:"user", content:text }];
    setChat(next);
    return callBackend({ messages: next, uiLang: lang });
  }

  const openNode = (node) => setStack(s => [...s, node]);
  const goBack   = () => setStack(s => s.slice(0, -1));
  const resetToRoot = () => setStack([]);

  const currentChildren =
    !lang ? null :
    stack.length === 0 ? FLOWS :
    stack[stack.length - 1]?.children ?? FLOWS;

  const ALL_SSIDS = ["D384","CDEA","CF2A","93EO","D93A","D9E4","6A04","9B7A","1CF8","D8C4","CD9E","CF20","23F0","B4B4","DA4E","D5F6"];

  const onChipClick = (n) => {
    if (n.children) {
      setWifiCtas({ showPassword:false, showNotOk:false });
      return openNode(n);
    }

    if (n.action === "tour") {
      try { window.open(MATTERPORT_URL, "_blank", "noopener,noreferrer"); } catch {}
      setWifiCtas({ showPassword:false, showNotOk:false });
      setShortcutsOpen(false);
      // tourOpenMsg ber jen z vybran√©ho jazyka
      setChat(c => [...c, { role:"assistant", content: tr[lang]?.tourOpenMsg || "Link" }]);
      return;
    }

    if (n.control?.kind === "wifi") {
      setShortcutsOpen(false);
      sendControl("Wi-Fi", { intent:"tech", sub:"wifi" });
      setWifiCtas({ showPassword:true, showNotOk:false });
      return;
    }

    if (n.control) {
      setShortcutsOpen(false);
      setWifiCtas({ showPassword:false, showNotOk:false });
      return sendControl(n.label, n.control);
    }
  };

  // intern√≠ (ponech√°no)
  const floors = [0,1,2,3];
  const lasts  = ["01","02","03","04","05"];

  const confirmRoom = () => {
    const { floor, last } = roomSheet;
    if (floor === null || last === null) return;
    const room = `${floor}${last}`.padStart(3, "0");
    setRoomSheet({ open:false, floor:null, last:null });
    setShowKeysCta(false);
    return sendControl(`N√°hradn√≠ kl√≠ƒç ${room}`, { intent:"tech", sub:"keys", room });
  };

  const confirmWifiRoom = () => {
    const { floor, last } = wifiRoomSheet;
    if (floor === null || last === null) return;
    const room = `${floor}${last}`.padStart(3, "0");
    setWifiRoomSheet({ open:false, floor:null, last:null });
    setWifiCtas({ showPassword:false, showNotOk:true }); // po odesl√°n√≠ pokoje zobraz ‚ÄûNefunguje‚Äú
    return sendText(room);
  };

  const confirmWifiSsid = () => {
    if (!wifiSsidSheet.ssid) return;
    const ssid = wifiSsidSheet.ssid;
    setWifiSsidSheet({ open:false, ssid:null });
    setWifiCtas({ showPassword:false, showNotOk:false });
    return sendText(ssid);
  };

  // Pomocn√©: v√Ωbƒõr jazyka ‚Äì EN prvn√≠, ostatn√≠ ve dvojic√≠ch
  const renderLangChooser = () => {
    const entries = Object.entries(LANGS);
    const first = entries.find(([code]) => code === "en");
    const rest = entries.filter(([code]) => code !== "en");

    return (
      <div className="bubble bot" style={{ display:"inline-block", maxWidth:"100%" }}>
        <strong>{tr.cs.chooseLang}</strong>

        <div className="langSingle">
          <button
            className="chipPrimary"
            style={{ ["--btn"]: "var(--blue)" }}
            onClick={() => {
              setLang("en");
              resetToRoot();
              setWifiCtas({ showPassword:false, showNotOk:false });
              setShortcutsOpen(true);
              scrollToShortcuts();
            }}
          >
            {first?.[1] || "English"}
          </button>
        </div>

        <div className="langGrid2">
          {rest.map(([code,label], i) => (
            <button
              key={code}
              className="chipPrimary"
              style={{ ["--btn"]: btnColorForIndex(i+1) }}
              onClick={() => {
                setLang(code);
                resetToRoot();
                setWifiCtas({ showPassword:false, showNotOk:false });
                setShortcutsOpen(true);
                scrollToShortcuts();
              }}
            >
              {label}
            </button>
          ))}
        </div>

        <div className="tips">
          {Object.keys(LANGS).map(k => k.toUpperCase()).join(" / ")}
        </div>
      </div>
    );
  };

  return (
    <>
      <GoogleStyle />

      {/* Header */}
      <header className="appHeader">
        <img className="logo" src="/help/chill1.jpg" alt="Chill Apartments" />
        <div className="title">Chill concierge</div>
        <img className="logo" src="/help/chill1.jpg" alt="Chill Apartments" />
      </header>

      <div className="row">
        {/* CHAT SCROLLER */}
        <div className="scroller" ref={scrollerRef}>
          {!lang && renderLangChooser()}

          {chat.map((m,i) =>
            m.role === "assistant"
              ? <div key={i}>{renderAssistant(m.content)}</div>
              : <div key={i} className="bubble me">{m.content}</div>
          )}
        </div>

        {/* ZKRATKY */}
        {lang && currentChildren && shortcutsOpen && (
          <div className="shortcuts" ref={shortcutsRef}>
            <div className="shortcutsHeader">
              <strong>{stack.length === 0 ? t(lang,"mainTitle") : t(lang,"subTitle")}</strong>
              <div className="btnRow">
                {stack.length > 0 && (
                  <button
                    className="backBtn"
                    onClick={() => {
                      goBack();
                      setWifiCtas({ showPassword:false, showNotOk:false });
                      scrollToShortcuts();
                    }}
                  >
                    {t(lang,"back")}
                  </button>
                )}
                <button className="backBtn" onClick={() => { setShortcutsOpen(false); }}>
                  {t(lang,"hide")}
                </button>
                <button
                  className="backBtn"
                  onClick={() => {
                    setLang(null);
                    setStack([]);
                    setWifiCtas({ showPassword:false, showNotOk:false });
                    setShortcutsOpen(false);
                    requestAnimationFrame(() => {
                      scrollerRef.current?.scrollTo({ top: 0, behavior: "smooth" });
                    });
                  }}
                >
                  üåê {t(lang || "cs","chooseLang")}
                </button>
              </div>
            </div>

            <div className="grid">
              {currentChildren.map((n, idx) =>
                n.children ? (
                  <button
                    key={idx}
                    className="chip"
                    style={{ ["--btn"]: btnColorForIndex(idx) }}
                    onClick={() => onChipClick(n)}
                  >
                    {n.label}
                  </button>
                ) : (
                  <button
                    key={idx}
                    className="chipPrimary"
                    style={{ ["--btn"]: btnColorForIndex(idx) }}
                    onClick={() => onChipClick(n)}
                    disabled={loading}
                    title={n.control?.sub || n.action || ""}
                  >
                    {n.label}
                  </button>
                )
              )}
            </div>

            <div className="tips" style={{ marginTop:8 }}>{t(lang,"stillAsk")}</div>
          </div>
        )}

        {/* FAB: kdy≈æ jsou zkratky zav≈ôen√© ‚Üí ƒçerven√© tlaƒç√≠tko ‚Äû‚Üê Zpƒõt‚Äú (jen znovu otev≈ôe menu) */}
        {!shortcutsOpen && lang && (
          <button
            className="fab fabBack"
            onClick={() => {
              setShortcutsOpen(true);
              requestAnimationFrame(() => {
                shortcutsRef.current?.scrollIntoView({ behavior: "smooth", block: "start" });
              });
            }}
            title={t(lang,"back")}
          >
            {t(lang,"back")}
          </button>
        )}

        {/* Kontaktn√≠ li≈°ta */}
        <div className="contactBar">{t(lang,"contact")}</div>
      </div>

      {/* ===== CTA STACK ===== */}
      <div className="fabStack" aria-live="polite">
        {showKeysCta && (
          <button className="fabAction" onClick={() => setRoomSheet({ open:true, floor:null, last:null })}>
            {t(lang,"pickRoom")}
          </button>
        )}
        {wifiCtas.showPassword && (
          <button className="fabAction" onClick={() => setWifiRoomSheet({ open:true, floor:null, last:null })}>
            {t(lang,"showMyWifi")}
          </button>
        )}
        {wifiCtas.showNotOk && (
          <button className="fabAction" onClick={() => setWifiSsidSheet({ open:true, ssid:null })}>
            {t(lang,"notOk")}
          </button>
        )}
      </div>

      {/* OVERLAY: N√°hradn√≠ kl√≠ƒç ‚Äì v√Ωbƒõr pokoje */}
      {roomSheet.open && (
        <div className="overlay" onClick={()=>setRoomSheet(s=>({ ...s, open:false }))}>
          <div className="sheet" onClick={(e)=>e.stopPropagation()}>
            <h4>{t(lang,"pickRoom")}</h4>
            <div className="tips" style={{marginBottom:6}}>{t(lang,"floor")}</div>
            <div className="pillRow" style={{marginBottom:8}}>
              {[0,1,2,3].map(f=>(
                <button key={f} className={`pill ${roomSheet.floor===f?'active':''}`} onClick={()=>setRoomSheet(s=>({...s, floor:f}))}>
                  {f}
                </button>
              ))}
            </div>
            <div className="tips" style={{marginTop:6, marginBottom:6}}>{t(lang,"room")}</div>
            <div className="pillRow" style={{marginBottom:12}}>
              {["01","02","03","04","05"].map(l=>(
                <button key={l} className={`pill ${roomSheet.last===l?'active':''}`} onClick={()=>setRoomSheet(s=>({...s, last:l}))}>
                  {l}
                </button>
              ))}
            </div>
            <div className="pillRow">
              <button className="backBtn" onClick={()=>setRoomSheet({open:false,floor:null,last:null})}>{t(lang,"cancel")}</button>
              <button
                className="chipPrimary"
                style={{ ["--btn"]: "var(--blue)" }}
                disabled={roomSheet.floor===null || roomSheet.last===null}
                onClick={confirmRoom}
              >
                {t(lang,"confirm")}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* OVERLAY: Wi-Fi ‚Äì v√Ωbƒõr pokoje */}
      {wifiRoomSheet.open && (
        <div className="overlay" onClick={()=>setWifiRoomSheet(s=>({ ...s, open:false }))}>
          <div className="sheet" onClick={(e)=>e.stopPropagation()}>
            <h4>{t(lang,"pickRoom")}</h4>
            <div className="tips" style={{marginBottom:6}}>{t(lang,"floor")}</div>
            <div className="pillRow" style={{marginBottom:8}}>
              {[0,1,2,3].map(f=>(
                <button key={f} className={`pill ${wifiRoomSheet.floor===f?'active':''}`} onClick={()=>setWifiRoomSheet(s=>({...s, floor:f}))}>
                  {f}
                </button>
              ))}
            </div>
            <div className="tips" style={{marginTop:6, marginBottom:6}}>{t(lang,"room")}</div>
            <div className="pillRow" style={{marginBottom:12}}>
              {["01","02","03","04","05"].map(l=>(
                <button key={l} className={`pill ${wifiRoomSheet.last===l?'active':''}`} onClick={()=>setWifiRoomSheet(s=>({...s, last:l}))}>
                  {l}
                </button>
              ))}
            </div>
            <div className="pillRow">
              <button className="backBtn" onClick={()=>setWifiRoomSheet({open:false,floor:null,last:null})}>{t(lang,"cancel")}</button>
              <button
                className="chipPrimary"
                style={{ ["--btn"]: "var(--blue)" }}
                disabled={wifiRoomSheet.floor===null || wifiRoomSheet.last===null}
                onClick={confirmWifiRoom}
              >
                {t(lang,"confirm")}
              </button>
            </div>
          </div>
        </div>
      )}

      {/* OVERLAY: Wi-Fi ‚Äì v√Ωbƒõr SSID */}
      {wifiSsidSheet.open && (
        <div className="overlay" onClick={()=>setWifiSsidSheet(s=>({ ...s, open:false }))}>
          <div className="sheet" onClick={(e)=>e.stopPropagation()}>
            <h4>{t(lang,"pickSsid")}</h4>
            <div className="pillRow" style={{marginBottom:12}}>
              {ALL_SSIDS.map(code=>(
                <button
                  key={code}
                  className={`pill ${wifiSsidSheet.ssid===code?'active':''}`}
                  onClick={()=>setWifiSsidSheet(s=>({...s, ssid:code}))}
                >
                  {code}
                </button>
              ))}
            </div>
            <div className="pillRow">
              <button className="backBtn" onClick={()=>setWifiSsidSheet({open:false, ssid:null})}>{t(lang,"cancel")}</button>
              <button
                className="chipPrimary"
                style={{ ["--btn"]: "var(--blue)" }}
                disabled={!wifiSsidSheet.ssid}
                onClick={confirmWifiSsid}
              >
                {t(lang,"confirm")}
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
}
